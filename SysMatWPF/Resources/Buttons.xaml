<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Default image-->
    <BitmapImage x:Key="DefaultImage" UriSource="/images/user.png" />

    <!--XML Doc-->
    <XmlDataProvider x:Key="MyPhoneBook" Source="\Resources\MyPhoneBook.xml" XPath="Data"/>

    <!--Round Button Big-->
    <Style x:Key ="roundButtonTemplate2" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Ellipse Name ="OuterRing" Width ="40" Height ="40" Fill ="Gray"/>
                        <Ellipse Name ="InnerRing" Width ="38" Height ="38" Fill ="LightGray"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Fill" Value ="Aliceblue"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Height" Value ="42"/>
                            <Setter TargetName ="OuterRing" Property ="Width" Value ="42"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Round Button style Medium-->
    <Style x:Key ="roundButtonTemplate" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Ellipse Name ="OuterRing" Width ="30" Height ="30" Fill ="Gray"/>
                        <Ellipse Name ="InnerRing" Width ="28" Height ="28" Fill ="WhiteSmoke"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Fill" Value ="Aliceblue"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Height" Value ="36"/>
                            <Setter TargetName ="OuterRing" Property ="Width" Value ="36"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Round Button style 4-->
    <Style x:Key ="roundButtonTemplate4" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Ellipse Name ="OuterRing" Width ="28" Height ="28" Fill ="Transparent"/>
                        <Ellipse Name ="InnerRing" Width ="26" Height ="26" Fill ="White"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Fill" Value ="LightGray"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Height" Value ="32"/>
                            <Setter TargetName ="OuterRing" Property ="Width" Value ="32"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Round Button style Small-->
    <Style x:Key ="roundButtonTemplateSmall" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Ellipse Name ="OuterRing" Width ="20" Height ="20" Fill ="Aliceblue"/>
                        <Ellipse Name ="InnerRing" Width ="18" Height ="18" Fill ="white"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Fill" Value ="gray"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Height" Value ="23"/>
                            <Setter TargetName ="OuterRing" Property ="Width" Value ="23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Round Button style Very Small-->
    <Style x:Key ="roundButtonTemplateVerySmall" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Ellipse Name ="OuterRing" Width ="14" Height ="14" Fill ="Aliceblue"/>
                        <Ellipse Name ="InnerRing" Width ="12" Height ="12" Fill ="white"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Fill" Value ="gray"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Height" Value ="15"/>
                            <Setter TargetName ="OuterRing" Property ="Width" Value ="15"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Round Button style Links-->
    <Style x:Key ="roundButtonTemplatelinks" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Ellipse Name ="OuterRing" Width ="40" Height ="40" Fill ="DarkGray"/>
                        <Ellipse Name ="InnerRing" Width ="38" Height ="38" Fill ="WhiteSmoke"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Fill" Value ="black"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="OuterRing" Property ="Height" Value ="42"/>
                            <Setter TargetName ="OuterRing" Property ="Width" Value ="42"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--3D Toggle RadioButton Style-->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="DimGray"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="mainGrid" Margin="0,0,1,1">

                        <Grid x:Name="uncheckedState">
                            <Border x:Name="uncheckedStateBorder1" BorderBrush="#49FFFFFF" BorderThickness="1,1,0,0" CornerRadius="8"/>
                            <Border x:Name="uncheckedStateBorder2" BorderBrush="#49000000" BorderThickness="0,0,1,1" CornerRadius="8"/>
                        </Grid>

                        <Grid x:Name="checkedState" Visibility="Collapsed">
                            <Border BorderBrush="#49000000" BorderThickness="1,1,0,0" CornerRadius="8" />
                            <Border BorderBrush="#49FFFFFF" BorderThickness="0,0,1,1" CornerRadius="8"/>
                        </Grid>

                        <!--
                        WPF needs a background to toggle IsChecked
                        if the ContentPresenter does not fill the whole area
                        -->
                        <Border Background="#00000000" />
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />

                    </Grid>

                    <!-- triggers toggle visual appearance -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkedState" Property="Visibility" Value="Visible" />
                            <Setter TargetName="uncheckedState" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="mainGrid" Property="Margin" Value="1,1,0,0"/>
                            <Setter Property="Foreground" Value="black"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="uncheckedStateBorder1" Property ="BorderBrush" Value ="whitesmoke"/>
                            <Setter TargetName ="uncheckedStateBorder2" Property ="BorderBrush" Value ="whitesmoke"/>
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="Foreground" Value="black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SquareBackgroundButton light-->
    <Style x:Key ="SquareBackgroundButton" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Border Name ="Outer" 
                                Background ="Transparent"
                                Height="{TemplateBinding Border.Height}"
                                Width="{TemplateBinding Border.Width}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                BorderThickness="0"
                                Padding="{TemplateBinding Control.Padding}"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Height="15" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="Outer" Property ="Background" Value ="#cde6f7"/>
                            <Setter Property ="Foreground" Value ="#ff5637"/>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SquareBackgroundButton dark-->
    <Style x:Key ="SquareBackgroundButtonDark" TargetType ="{x:Type Button}">
        <Setter Property ="Foreground" Value ="Black"/>
        <Setter Property ="FontWeight" Value ="Bold"/>
        <Setter Property ="Template">
            <Setter.Value>
                <ControlTemplate TargetType ="{x:Type Button}">
                    <Grid>
                        <Border Name ="Outer" 
                                Background ="Transparent"
                                Height="{TemplateBinding Border.Height}"
                                Width="{TemplateBinding Border.Width}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                BorderThickness="0"
                                Padding="{TemplateBinding Control.Padding}"/>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Height="15" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="Outer" Property ="Background" Value ="#2a8ad4"/>
                            <Setter Property ="Foreground" Value ="#ff5637"/>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- My Button Style-->
    <Style x:Key ="myFirstbutton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    
                    <Grid x:Name="mainGrid" Margin="0,0,1,1">
                        <Grid x:Name="uncheckedState">
                            <Border x:Name="ButtonRect" BorderBrush="whitesmoke" BorderThickness="1,1,1,1" CornerRadius="6"/>
                            <Border x:Name="uncheckedStateBorder2" BorderBrush="#49000000" BorderThickness="2,2,2,2" CornerRadius="6"/>
                        </Grid>
                        <Border Background="#00000000" />
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Grid>
                   
                    <ControlTemplate.Triggers>                     
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="ButtonRect" Property ="BorderBrush"  Value ="lightgray"/>
                            <Setter TargetName ="ButtonRect" Property ="BorderThickness" Value ="2,2,2,2"/>
                            <Setter Property="Cursor" Value="Hand"/>                           
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="ButtonRect" Property ="BorderBrush"  Value ="black"/>
                            <Setter TargetName ="ButtonRect" Property ="BorderThickness" Value ="2,2,2,2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key ="mySecondbutton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Grid x:Name="mainGrid" Margin="0,0,1,1">
                        <Grid x:Name="uncheckedState">
                            <Border x:Name="ButtonRect" BorderBrush="whitesmoke" BorderThickness="0,0,0,0" CornerRadius="6"/>
                            <Border x:Name="uncheckedStateBorder2" BorderBrush="#49000000" BorderThickness="0,0,0,0" CornerRadius="6"/>
                        </Grid>
                        <Border Background="#00000000" />
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property ="IsMouseOver" Value ="True">
                            <Setter TargetName ="ButtonRect" Property ="BorderBrush"  Value ="lightgray"/>
                            <Setter TargetName ="ButtonRect" Property ="BorderThickness" Value ="2,2,2,2"/>
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property ="IsPressed" Value ="True">
                            <Setter TargetName ="ButtonRect" Property ="BorderBrush"  Value ="black"/>
                            <Setter TargetName ="ButtonRect" Property ="BorderThickness" Value ="1,1,1,1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>