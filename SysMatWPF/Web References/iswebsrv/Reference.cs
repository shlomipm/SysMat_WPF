//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
// 
#pragma warning disable 1591

namespace SysMatWPF.iswebsrv {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GlobalServicesSoap", Namespace="http://sap.com/")]
    public partial class GlobalServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsGroupExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDlMemebersOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GlobalServices() {
            this.Url = global::SysMatWPF.Properties.Settings.Default.SysMatWPF_iswebsrv_GlobalServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event IsUserExistCompletedEventHandler IsUserExistCompleted;
        
        /// <remarks/>
        public event IsGroupExistCompletedEventHandler IsGroupExistCompleted;
        
        /// <remarks/>
        public event GetDlMemebersCompletedEventHandler GetDlMemebersCompleted;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sap.com/GetUserInfo", RequestNamespace="http://sap.com/", ResponseNamespace="http://sap.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserInfo(string inSAM, string inType) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        inSAM,
                        inType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string inSAM, string inType) {
            this.GetUserInfoAsync(inSAM, inType, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string inSAM, string inType, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        inSAM,
                        inType}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sap.com/IsUserExist", RequestNamespace="http://sap.com/", ResponseNamespace="http://sap.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsUserExist(string inSAM) {
            object[] results = this.Invoke("IsUserExist", new object[] {
                        inSAM});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsUserExistAsync(string inSAM) {
            this.IsUserExistAsync(inSAM, null);
        }
        
        /// <remarks/>
        public void IsUserExistAsync(string inSAM, object userState) {
            if ((this.IsUserExistOperationCompleted == null)) {
                this.IsUserExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserExistOperationCompleted);
            }
            this.InvokeAsync("IsUserExist", new object[] {
                        inSAM}, this.IsUserExistOperationCompleted, userState);
        }
        
        private void OnIsUserExistOperationCompleted(object arg) {
            if ((this.IsUserExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserExistCompleted(this, new IsUserExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sap.com/IsGroupExist", RequestNamespace="http://sap.com/", ResponseNamespace="http://sap.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsGroupExist(string inSAM) {
            object[] results = this.Invoke("IsGroupExist", new object[] {
                        inSAM});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsGroupExistAsync(string inSAM) {
            this.IsGroupExistAsync(inSAM, null);
        }
        
        /// <remarks/>
        public void IsGroupExistAsync(string inSAM, object userState) {
            if ((this.IsGroupExistOperationCompleted == null)) {
                this.IsGroupExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsGroupExistOperationCompleted);
            }
            this.InvokeAsync("IsGroupExist", new object[] {
                        inSAM}, this.IsGroupExistOperationCompleted, userState);
        }
        
        private void OnIsGroupExistOperationCompleted(object arg) {
            if ((this.IsGroupExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsGroupExistCompleted(this, new IsGroupExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sap.com/GetDlMemebers", RequestNamespace="http://sap.com/", ResponseNamespace="http://sap.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDlMemebers(string DistributionList) {
            object[] results = this.Invoke("GetDlMemebers", new object[] {
                        DistributionList});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDlMemebersAsync(string DistributionList) {
            this.GetDlMemebersAsync(DistributionList, null);
        }
        
        /// <remarks/>
        public void GetDlMemebersAsync(string DistributionList, object userState) {
            if ((this.GetDlMemebersOperationCompleted == null)) {
                this.GetDlMemebersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDlMemebersOperationCompleted);
            }
            this.InvokeAsync("GetDlMemebers", new object[] {
                        DistributionList}, this.GetDlMemebersOperationCompleted, userState);
        }
        
        private void OnGetDlMemebersOperationCompleted(object arg) {
            if ((this.GetDlMemebersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDlMemebersCompleted(this, new GetDlMemebersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sap.com/SendMail", RequestNamespace="http://sap.com/", ResponseNamespace="http://sap.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(string SmtpServer, string From, string DisplayFrom, string Subject, string Body, string sTo, string sCC) {
            object[] results = this.Invoke("SendMail", new object[] {
                        SmtpServer,
                        From,
                        DisplayFrom,
                        Subject,
                        Body,
                        sTo,
                        sCC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(string SmtpServer, string From, string DisplayFrom, string Subject, string Body, string sTo, string sCC) {
            this.SendMailAsync(SmtpServer, From, DisplayFrom, Subject, Body, sTo, sCC, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(string SmtpServer, string From, string DisplayFrom, string Subject, string Body, string sTo, string sCC, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        SmtpServer,
                        From,
                        DisplayFrom,
                        Subject,
                        Body,
                        sTo,
                        sCC}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsUserExistCompletedEventHandler(object sender, IsUserExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsGroupExistCompletedEventHandler(object sender, IsGroupExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsGroupExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsGroupExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDlMemebersCompletedEventHandler(object sender, GetDlMemebersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDlMemebersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDlMemebersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591